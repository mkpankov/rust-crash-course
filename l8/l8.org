#+TITLE: Rust №8. Частоиспользуемые коллекции
#+AUTHOR: Панков Михаил
#+DATE: Февраль 2017
#+EMAIL: work@michaelpankov.com
#+LANGUAGE: ru
#+CATEGORY: task
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
# +LaTeX_CLASS_OPTIONS: [notes]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+latex_header: \usepackage[english,russian]{babel}
#+latex_header: \mode<beamer>{\usetheme{metropolis}}

* Коллекции в стандартной библиотеке

** Коллекции

- Динамический массив (<<вектор>>, ~Vec~)
- Изменяемая строка (~String~)
- Хеш-таблица (~HashMap~)

* Вектор

* Создание

** Создаём новый вектор

#+BEGIN_SRC rust
let v: Vec<i32> = Vec::new();
#+END_SRC

** Создаём новый вектор по-другому

#+BEGIN_SRC rust
let v = vec![1, 2, 3];
#+END_SRC

* Изменение

** Изменение

#+BEGIN_SRC rust
let mut v = Vec::new();

v.push(5);
v.push(6);
v.push(7);
v.push(8);
#+END_SRC

* Уничтожение

** Уничтожение вектора уничтожает его элементы

#+BEGIN_SRC rust
{
    let v = vec![1, 2, 3, 4];

    // работаем с v

} // <- v выходит из области видимости
  //    и уничтожается
#+END_SRC

* Доступ к элементам

** Доступ по индексу и get()

#+BEGIN_SRC rust
let v = vec![1, 2, 3, 4, 5];

let third: &i32 = &v[2];
let third: Option<&i32> = v.get(2);
#+END_SRC

** Зачем два способа доступа

#+BEGIN_SRC rust
let v = vec![1, 2, 3, 4, 5];

let does_not_exist = &v[100];
let does_not_exist = v.get(100);
#+END_SRC

* Сломанные ссылки

** Попробуем такой код

#+BEGIN_SRC rust
let mut v = vec![1, 2, 3, 4, 5];

let first = &v[0];

v.push(6);
#+END_SRC

** Не компилируется!

#+BEGIN_SRC text
error[E0502]: cannot borrow `v` as mutable
because it is also borrowed as immutable
  |
4 | let first = &v[0];
  |              - immutable borrow occurs here
5 |
6 | v.push(6);
  | ^ mutable borrow occurs here
7 | }
  | - immutable borrow ends here
#+END_SRC

* Использование перечисления для хранения значений разных типов

** Ячейка таблицы

#+BEGIN_SRC rust
enum SpreadsheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}

let row = vec![
    SpreadsheetCell::Int(3),
    SpreadsheetCell::Text(String::from("синий")),
    SpreadsheetCell::Float(10.12),
];
#+END_SRC

* Подробнее

** Смотрите документацию по API

- https://doc.rust-lang.org/std/vec/struct.Vec.html

* Изменяемая строка

** Что такое String?

- Не путать со строковыми срезами (~&str~)
- Тип в стандартной библиотеке
- Реализован как массив байт
- Владеет данными
- Позволяет изменять данные
- UTF-8
- Нельзя просто так доступаться по индексу

** Ещё есть

- OsString, OsStr, CString, CStr

* Создание

** Создаём строку

#+BEGIN_SRC rust
let s = String::new();
#+END_SRC

** Создаём строку с каким-то содержимым

#+BEGIN_SRC rust
let data = "какое-то содержимое";

let s = data.to_owned();

// можно сразу на литерале:
let s = "какое-то содержимое".to_owned();
#+END_SRC

** Строка с содержимым по-другому

#+BEGIN_SRC rust
let s = String::from("содержимое");
#+END_SRC

** Юникод!

#+BEGIN_SRC rust
let hello = "Dobrý den";
let hello = "Hello";
let hello = "Olá";
let hello = "Здравствуйте";
let hello = "Hola";
#+END_SRC

* Изменение

** Дописывание в конец (1)

#+BEGIN_SRC rust
let mut s = String::from("foo");
s.push_str("bar");
#+END_SRC

** Дописывание в конец (2)

#+BEGIN_SRC rust
let mut s1 = String::from("foo");
let s2 = String::from("bar");
s1.push_str(&s2);
#+END_SRC

** Дописывание в конец одного символа

#+BEGIN_SRC rust
let mut s = String::from("lo");
s.push('l');
#+END_SRC

* Конкатенация

** Оператор сложения

#+BEGIN_SRC rust
let s1 = String::from("Привет, ");
let s2 = String::from("мир!");
let s3 = s1 + &s2; // s1 перемещён
#+END_SRC

** Сигнатура оператора сложения

#+BEGIN_SRC rust
fn add(self, s: &str) -> String {
#+END_SRC

** Конкатенация многих строк

#+BEGIN_SRC rust
let s1 = String::from("tic");
let s2 = String::from("tac");
let s3 = String::from("toe");

let s = s1 + "-" + &s2 + "-" + &s3;
#+END_SRC

** format!

#+BEGIN_SRC rust
let s1 = String::from("tic");
let s2 = String::from("tac");
let s3 = String::from("toe");

let s = format!("{}-{}-{}", s1, s2, s3);
#+END_SRC

* Доступ по индексу

** Это не работает

#+BEGIN_SRC rust
let s1 = String::from("привет");
let h = s1[0];
#+END_SRC

** Ошибка

#+BEGIN_SRC text
error: the trait bound
`std::string::String: std::ops::Index<_>`
is not satisfied [--explain E0277]
  |>
  |>     let h = s1[0];
  |>             ^^^^^
note: the type `std::string::String`
cannot be indexed by `_`
#+END_SRC

** Внутреннее представление (1)

#+BEGIN_SRC rust
let len = String::from("Hola").len(); // 4
#+END_SRC

** Внутреннее представление (2)

#+BEGIN_SRC rust
let len = String::from("Здравствуйте").len(); // ?
#+END_SRC

** Внутреннее представление (3)

#+BEGIN_SRC rust
let len = String::from("Здравствуйте").len(); // 24
#+END_SRC

** Внутреннее представление (4)

#+BEGIN_SRC rust
let hello = "Здравствуйте";
let answer = &hello[0]; // 208? 151?
#+END_SRC

* Байты, скаляры, графемные кластеры...

** Хинди

- У меня нет подходящего шрифта
- [224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,
  224, 165, 135]
- ['न', 'म', 'स', '्', 'त', 'े']
- ["न", "म", "स्", "ते"]

** Отрезаем строчки

#+BEGIN_SRC rust
let hello = "Здравствуйте";

let s = &hello[0..1];
#+END_SRC

** ...и паникуем

#+BEGIN_SRC rust
thread 'main' panicked at 'index 0 and/or 1
in `Здравствуйте` do not lie on
character boundary',
../src/libcore/str/mod.rs:1694
#+END_SRC

* Перебор

** Итератор chars()

#+BEGIN_SRC rust
for c in "नमस्ते".chars() {
    println!("{}", c);
}
#+END_SRC

** Итератор bytes()

#+BEGIN_SRC rust
for b in "नमस्ते".bytes() {
    println!("{}", b);
}
#+END_SRC

* Строки сложные

* Хеш-таблицы

** HashMap<K, V>

- хеш
- словарь
- хеш-таблица

* Создание

** Команды и очки

#+BEGIN_SRC rust
use std::collections::HashMap;

let mut scores = HashMap::new();

scores.insert(String::from("Синие"), 10);
scores.insert(String::from("Жёлтые"), 50);
#+END_SRC

** Создание через collect()

#+BEGIN_SRC rust
  use std::collections::HashMap;

  let teams  = vec![
      String::from("Синие"),
      String::from("Жёлтые")];
  let initial_scores = vec![10, 50];

  let scores: HashMap<_, _> =
      teams.iter().zip(
          initial_scores.iter())
      .collect();
#+END_SRC

* Хеш-таблица и владение

** Copy или нет?

#+BEGIN_SRC rust
  use std::collections::HashMap;

  let field_name =
      String::from("Любимый цвет");
  let field_value = String::from("Синий");

  let mut map = HashMap::new();
  map.insert(field_name, field_value);
#+END_SRC

* Доступ к элементам хеш-таблицы

** get()

#+BEGIN_SRC rust
  use std::collections::HashMap;

  let mut scores = HashMap::new();

  scores.insert(String::from("Синие"), 10);
  scores.insert(String::from("Жёлтые"), 50);

  let team_name = String::from("Синие");
  let score = scores.get(&team_name);
#+END_SRC

** Перебор

#+BEGIN_SRC rust
  use std::collections::HashMap;

  let mut scores = HashMap::new();

  scores.insert(String::from("Синие"), 10);
  scores.insert(String::from("Жёлтые"), 50);

  for (key, value) in &scores {
      println!("{}: {}", key, value);
  }
#+END_SRC

* Изменение

** Перезапись значения

#+BEGIN_SRC rust
  use std::collections::HashMap;

  let mut scores = HashMap::new();

  scores.insert(String::from("Синие"), 10);
  scores.insert(String::from("Синие"), 25);

  println!("{:?}", scores);
#+END_SRC

** Вставка только в случае отсутствия

#+BEGIN_SRC rust
  use std::collections::HashMap;

  let mut scores = HashMap::new();
  scores.insert(String::from("Синие"), 10);

  scores.entry(String::from("Жёлтые")).or_insert(50);
  scores.entry(String::from("Синие")).or_insert(50);

  println!("{:?}", scores);
#+END_SRC

** Обновление значения с использование текущего

#+BEGIN_SRC rust
  use std::collections::HashMap;

  let text = "привет мир прекрасный мир";

  let mut map = HashMap::new();

  for word in text.split_whitespace() {
      let count = map.entry(word).or_insert(0);
      ,*count += 1;
  }

  println!("{:?}", map);
#+END_SRC

* Хеширующая функция

** Безопасная по умолчанию

- Против DoS
- Можно изменить с помощью ~BuildHasher~

* Домашнее задание

** Домашнее задание

- Написать функцию, которая возвращает среднее, медиану и моду списка
  целых чисел
- ХХХ

* Спасибо

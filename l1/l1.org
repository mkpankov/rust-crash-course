#+TITLE: Rust №1. Вступление. Начинаем работу
#+AUTHOR: Панков Михаил
#+DATE: Февраль 2017
#+EMAIL: work@michaelpankov.com
#+LANGUAGE: ru
#+CATEGORY: task
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
# +LaTeX_CLASS_OPTIONS: [notes]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+latex_header: \usepackage[english,russian]{babel}
#+latex_header: \mode<beamer>{\usetheme{metropolis}}

* История и место языка

** История

- 2006: личный проект Грейдона Хоара

- 2009: проект начала вести Mozilla

- 2010: проект представлен общественности

- 2012: общедоступная альфа-версия компилятора

- 2015: первый стабильный выпуск

** Первоначальная цель

Сделать мощный язык с хорошей поддержкой многопоточности с компиляцией
в нативный код

** Исторические артефакты

- Изначально компилятор был написан на OCaml
- Изначально в языке были <<зелёные потоки>>
- Язык был больше похож на Эрланг и Го

* Название

** Название

- Это грибы
***                                                          :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: column
    :END:
    [[file:pics/plant.jpg][file:~/org/courses/kl-001/l1/pics/plant.jpg]]

** Название

- Это <<близко к железу>>

** Название
- Это большие, надёжные вещи, которые работают десятилетиями
***                                                          :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: column
    :END:
    [[file:pics/ship.jpg][file:~/org/courses/kl-001/l1/pics/ship.jpg]]

** Название
- Это здания из кортеновской стали
***                                                          :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: column
    :END:      
    [[file:pics/tower.jpg][file:~/org/courses/kl-001/l1/pics/tower.jpg]]

** Название
- Это не <<хром>>
***                                                          :B_column:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: column
    :END:      
    [[file:pics/rust.png][file:~/org/courses/kl-001/l1/pics/rust.png]]

* Характеристики

** Помогает писать надёжный код

- Строгая типизация

- Владение

- Статическая проверка работы с памятью

- Статическая проверка отсутствия гонок данных

** Помогает писать высокопроизводительный код

- Low-latency

  Нет сборщика мусора

- Zero-Copy

- Бесстрашная многопоточность

- Мощный оптимизатор LLVM

  Пример: цепочки итераторов

** Помогает писать красивый код

- Автоматический вывод типов

- Сопоставление с образцом

- Переиспользование кода через типажи

  Не объекто-ориентированный язык

* Hello world

** Hello world

#+BEGIN_SRC rust
fn main()
{
    println!("Привет, мир!");
}
#+END_SRC

** Юникод!

#+BEGIN_SRC rust
fn main()
{
    println!("Привет, мир!");
}
#+END_SRC

** main ничего не возвращает

#+BEGIN_SRC rust
fn main()
{
    println!("Привет, мир!");
}
#+END_SRC

** println! - это макрос

#+BEGIN_SRC rust
fn main()
{
    println!("Привет, мир!");
}
#+END_SRC

* Переменные

** Переменные

- На самом деле не переменные

- По умолчанию всё неизменяемо

** Переменные

#+BEGIN_SRC rust
let foo = 42;
foo = 43; // error
let mut foo = 42;
foo = 43; // ok
#+END_SRC

* Типы данных

** Примитивы

- ~u8/i8~, ~u16/i16~, ~u32/i32~, ~u64/i64~
- ~usize/isize~
- ~char~
- ~bool~
- ~f32~, ~f64~

** Примитивы

#+BEGIN_SRC rust
let u: u8 = 1;
let i: isize = 100500;
let c: char = 'Я';
let b: bool = true;
#+END_SRC

** Строки

- ~String~
- ~str~

** Строки

#+BEGIN_SRC rust
let s: String = String::new("авбгде");
let ss: &str = "тратата";
#+END_SRC

** Массивы

- ~[u8; 8]~

** Массивы

#+BEGIN_SRC rust
  let a1: [u8; 10] = [255; 10];
  let a2: [u8; 4] = [255, 254, 253, 252];
#+END_SRC

** Срезы

- ~[u8]~

** Срезы

#+BEGIN_SRC rust
  let a: [u8; 10] = [255; 10];
  let s1: &[u8] = &a[5..];
  let s2: &[u8] = &a[1..3];
  let s3: &[u8] = &a[..2];
#+END_SRC

** Структуры

#+BEGIN_SRC rust
struct Foo {
  a: usize,
  b: String,
}
#+END_SRC

** Перечисления

#+BEGIN_SRC rust
  enum Bar {
      Baz,
      Qux,
      Zig,
  }
#+END_SRC

** Перечисления

#+BEGIN_SRC rust
  enum Bar {
      Baz(usize),
      Qux(String),
      Zig(Foo),
  }
#+END_SRC

** Кортежи

#+BEGIN_SRC rust
let t: (usize, usize, usize) = (1, 2, 42);
#+END_SRC

** Константы

- ~static~

- ~const~

** Ссылки

- ~&usize~

** Ссылки

#+BEGIN_SRC rust
let u: usize = 42;
let ur1: &usize = &u;
*ur1 = 43; // error
let ur2: &mut usize = &mut u;
*ur2 = 43; // ok
#+END_SRC

** Указатели

- ~*const usize~
- ~*mut usize~

* Система сборки и модули

** Cargo

- ~cargo new --bin my_app~
- ~cargo add postgresql~
- ~cargo build~
- ~cargo test~
- ~cargo publish~

** Модули

#+BEGIN_SRC text
├── src
│   ├── client.rs
│   ├── lib.rs
│   └── network
│       ├── mod.rs
│       └── server.rs
#+END_SRC

* Обработка ошибок

** panic!

#+BEGIN_SRC rust
  if all_is_lost {
      panic!("Я так больше не могу!");
  }
#+END_SRC

** Result

#+BEGIN_SRC rust
  let result = go_to_outside_world()?
               .process_result();
  let another_result =
      if go_outdoors().is_ok()
          { "Хорошо" }
      else
          { "Плохо" };
#+END_SRC

* Тесты

** Тесты

#+BEGIN_SRC rust
  #[test]
  fn a_simple_case() {
      let result = "привет";
      assert_eq!(result, "мир",
                 "приветствие провалено");
  }
#+END_SRC

** Тесты

    [[file:pics/test.png][file:~/org/courses/kl-001/l1/pics/test.png]]

* Как начать

** Где установить

https://www.rust-lang.org/install.html

** Можно без установки

https://play.rust-lang.org/

** Поддержка в редакторах

Во всех есть свои пакеты

** racer

Штука для автодополнения и навигации

** Что читать

- http://rust-lang.github.io/book
- http://rurust.github.io/rust_book_ru/

** Где спрашивать

- https://users.rust-lang.org/
- https://gitter.im/ruRust/general

#+TITLE: Rust №10. Обобщённые типы, типажи и времена жизни
#+AUTHOR: Панков Михаил
#+DATE: Февраль 2017
#+EMAIL: work@michaelpankov.com
#+LANGUAGE: ru
#+CATEGORY: task
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
# +LaTeX_CLASS_OPTIONS: [notes]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+latex_header: \usepackage[english,russian]{babel}
#+latex_header: \mode<beamer>{\usetheme{metropolis}}

* Обобщённые типы

** Мы уже использовали обобщённые типы

- ~Option<T>~
- ~Result<T, E>~
- ~Vec<T>~
- ~HashMap<K, V>~

** План

- Устранение повторения кода через функции
- Устранение повторения функций, отличающихся только типами
- Типажи
- Времена жизни

** Пример: наибольшее число в списке

#+BEGIN_SRC rust
fn main() {
    let numbers = vec![34, 50, 25, 100, 65];
    let mut largest = numbers[0];
    for number in numbers {
        if number > largest {
            largest = number;
        }
    }
    println!("Наибольшее число - {}", largest);
}
#+END_SRC

** Обрабатываем 2 списка

#+BEGIN_SRC rust
    let numbers = vec![34, 50, 25, 100, 65];
    let mut largest = numbers[0];
    for number in numbers {
        if number > largest {
            largest = number;
    ...
    let numbers = vec![102, 34, 6000, 89, 54, 2, 43, 8];
    let mut largest = numbers[0];
    for number in numbers {
        if number > largest {
            largest = number;
    ...
#+END_SRC

** Устраняем повторение: функция

#+BEGIN_SRC rust
fn largest(list: &[i32]) -> i32 {
    let mut largest = list[0];
    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }
    largest
}
#+END_SRC

** Устраняем повторение: использование

#+BEGIN_SRC rust
fn main() {
    let numbers = vec![34, 50, 25, 100, 65];

    let result = largest(&numbers);
    println!("Наибольшее число - {}", result);

    let numbers = vec![102, 34, 6000, 89, 54, 2, 43, 8];

    let result = largest(&numbers);
    println!("Наибольшее число - {}", result);
}
#+END_SRC

** Процесс

- Замечаем повторяющийся код
- Выносим его в функцию с определёнными аргументами и возвращаемым значением
- Заменяем повторяющийся код на вызовы функции

** Другое повторение

- Что если у нас 2 функции, одна из которых ищет наибольшее значение в списке
  ~i32~, а другая - в списке ~char~?

* Обобщённые типы данных

* Использование обобщённых типов в определении функций

** Две почти одинаковые функции (1)

#+BEGIN_SRC rust
fn largest_i32(list: &[i32]) -> i32 {
    let mut largest = list[0];
    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }
    largest
}
#+END_SRC

** Две почти одинаковые функции (2)

#+BEGIN_SRC rust
fn largest_char(list: &[char]) -> char {
    let mut largest = list[0];
    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }
    largest
}
#+END_SRC

** Вызывающий код

#+BEGIN_SRC rust
fn main() {
    let numbers = vec![34, 50, 25, 100, 65];
    let result = largest_i32(&numbers);
    println!("Наибольшее число - {}", result);
    let chars = vec!['y', 'm', 'a', 'q'];
    let result = largest_char(&chars);
    println!("Наибольший символ - {}", result);
}
#+END_SRC

** Обобщаем функции

#+BEGIN_SRC rust
fn largest<T>(list: &[T]) -> T {
    let mut largest = list[0];
    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }
    largest
}
#+END_SRC

** Вызов обобщённых функций

#+BEGIN_SRC rust
fn main() {
    let numbers = vec![34, 50, 25, 100, 65];

    let result = largest(&numbers);
    println!("Наибольшее число - {}", result);

    let chars = vec!['y', 'm', 'a', 'q'];

    let result = largest(&chars);
    println!("Наибольший символ - {}", result);
}
#+END_SRC

** Не компилируется

#+BEGIN_SRC text
  error[E0369]: binary operation `>`
  cannot be applied to type `T`
    |
  5 |         if item > largest {
    |            ^^^^
    |
  note: an implementation of
  `std::cmp::PartialOrd` might be missing for `T`
#+END_SRC

* Использование обобщённых типов в определении структур

** Пример с точкой

#+BEGIN_SRC rust
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let integer = Point { x: 5, y: 10 };
    let float = Point { x: 1.0, y: 4.0 };
}
#+END_SRC

** Поля разного типа не работают

#+BEGIN_SRC rust
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let wont_work = Point { x: 5, y: 4.0 };
}
#+END_SRC

** Ошибка компиляции

#+BEGIN_SRC text
  error[E0308]: mismatched types
   -->
    |
  7 |     let wont_work = Point { x: 5, y: 4.0 };
    |                                      ^^^
              expected integral variable, found
              floating-point variable
    |
    = note: expected type `{integer}`
    = note:    found type `{float}`
#+END_SRC

** Обобщаем оба типа

#+BEGIN_SRC rust
struct Point<T, U> {
    x: T,
    y: U,
}

fn main() {
    let both_integer = Point { x: 5, y: 10 };
    let both_float = Point { x: 1.0, y: 4.0 };
    let integer_and_float = Point { x: 5, y: 4.0 };
}
#+END_SRC

* Использование обобщённых типов в определении перечислений

** Option<T>

#+BEGIN_SRC rust
enum Option<T> {
    Some(T),
    None,
}
#+END_SRC

** Result<T, E>

#+BEGIN_SRC rust
enum Result<T, E> {
    Ok(T),
    Err(E),
}
#+END_SRC

* Использование обобщённых типов в определении методов

** Возвращаем поле x

#+BEGIN_SRC rust
struct Point<T> {
    x: T,
    y: T,
}
impl<T> Point<T> {
    fn x(&self) -> &T {
        &self.x
    }
}
fn main() {
    let p = Point { x: 5, y: 10 };
    println!("p.x = {}", p.x());
}
#+END_SRC

** Смешиваем разные обобщённые типы (1)

#+BEGIN_SRC rust
struct Point<T, U> {
    x: T,
    y: U,
}
impl<T, U> Point<T, U> {
    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {
        Point {
            x: self.x,
            y: other.y,
        }
    }
}
#+END_SRC

** Смешиваем разные обобщённые типы (2)
#+BEGIN_SRC rust
fn main() {
    let p1 = Point { x: 5, y: 10.4 };
    let p2 = Point { x: "Hello", y: 'c'};
    let p3 = p1.mixup(p2);
    println!("p3.x = {}, p3.y = {}", p3.x, p3.y);
}
#+END_SRC

* Производительность обобщённого кода

** Мономорфизация

#+BEGIN_SRC rust
let integer = Some(5);
let float = Some(5.0);
#+END_SRC

** Результат примерно такой

#+BEGIN_SRC rust
enum Option_i32 {
    Some(i32),
    None,
}
enum Option_f64 {
    Some(f64),
    None,
}
fn main() {
    let integer = Option_i32::Some(5);
    let float = Option_f64::Some(5.0);
}
#+END_SRC

* Типажи: определяем общее поведение

* Определение типажа

** Нечто, о чём можно дать сводку

#+BEGIN_SRC rust
pub trait Summarizable {
    fn summary(&self) -> String;
}
#+END_SRC

* Реализация типажа на типе

** Статья

#+BEGIN_SRC rust
  pub struct NewsArticle {
      pub headline: String,
      pub location: String,
      pub author: String,
      pub content: String,
  }
  impl Summarizable for NewsArticle {
      fn summary(&self) -> String {
          format!(
              "{}, автор {} ({})",
              self.headline, self.author,
              self.location)
      }
  }
#+END_SRC

** Твит

#+BEGIN_SRC rust
  pub struct Tweet {
      pub username: String,
      pub content: String,
      pub reply: bool,
      pub retweet: bool,
  }

  impl Summarizable for Tweet {
      fn summary(&self) -> String {
          format!("{}: {}",
                  self.username, self.content)
      }
  }
#+END_SRC

** Как вызвать обобщённый метод

#+BEGIN_SRC rust
  let tweet = Tweet {
      username: String::from("horse_ebooks"),
      content: String::from(
          "тра-та-та"),
      reply: false,
      retweet: false,
  };

  println!("1 новый твит: {}", tweet.summary());
#+END_SRC

** Импорт и реализация чужого типажа

#+BEGIN_SRC rust
  extern crate aggregator;
  use aggregator::Summarizable;
  struct WeatherForecast {
      ...
  }
  impl Summarizable for WeatherForecast {
      fn summary(&self) -> String {
          format!(
              "Температура от {} до {}. Шанс осадков {}%.",
              self.low_temp, self.high_temp,
              self.chance_of_precipitation)
      }
  }
#+END_SRC

* Реализация по умолчанию

** Для всех, кто не реализует

#+BEGIN_SRC rust
pub trait Summarizable {
    fn summary(&self) -> String {
        String::from("(Читать дальше...)")
    }
}
#+END_SRC

** Реализация реализации по умолчанию

#+BEGIN_SRC rust
impl Summarizable for NewsArticle {}
#+END_SRC

** Можем вызывать такой метод как обычно

#+BEGIN_SRC rust
  let article = NewsArticle {
      ...
  };

  println!("Новая статья! {}", article.summary());

#+END_SRC

** Summarizable с двумя методами

#+BEGIN_SRC rust
  pub trait Summarizable {
      fn author_summary(&self) -> String;

      fn summary(&self) -> String {
          format!(
              "(Читать дальше от {}...)",
              self.author_summary())
      }
  }
#+END_SRC

** Реализация

#+BEGIN_SRC rust
impl Summarizable for Tweet {
    fn author_summary(&self) -> String {
        format!("@{}", self.username)
    }
}
#+END_SRC

** Вызываем как обычно

#+BEGIN_SRC rust
  let tweet = Tweet {
      username: String::from("horse_ebooks"),
      ...
  };

  println !("1 новый твит: {}", tweet.summary());
#+END_SRC

* Ограничения типажей

** Обобщённая функция

#+BEGIN_SRC rust
pub fn notify<T: Summarizable>(item: T) {
    println!("Breaking news! {}", item.summary());
}
#+END_SRC

** Длинная сигнатура

#+BEGIN_SRC rust
  fn some_function<T: Display + Clone,
                   U: Clone + Debug>(
      t: T, u: U) -> i32 {
#+END_SRC

** where

#+BEGIN_SRC rust
fn some_function<T, U>(t: T, u: U) -> i32
    where T: Display + Clone,
          U: Clone + Debug
{
#+END_SRC

* Чиним функцию largest

** Не компилируется

#+BEGIN_SRC text
  error[E0369]: binary operation `>`
  cannot be applied to type `T`
    |
  5 |         if item > largest {
    |            ^^^^
    |
  note: an implementation of
  `std::cmp::PartialOrd` might be missing for `T`
#+END_SRC

** Меняем сигнатуру

#+BEGIN_SRC rust
fn largest<T: PartialOrd>(list: &[T]) -> T {
#+END_SRC

** Новые ошибки (1)

#+BEGIN_SRC text
  error[E0508]: cannot move out of type `[T]`,
  a non-copy array
   --> src/main.rs:4:23
    |
  4 |     let mut largest = list[0];
    |         -----------   ^^^^^^^
    |       cannot move out of here
    |         |
    |         hint: to prevent move, use
    |  `ref largest` or `ref mut largest`

#+END_SRC

** Новые ошибки (2)

#+BEGIN_SRC text
  error[E0507]: cannot move out of borrowed content
   --> src/main.rs:6:9
    |
  6 |     for &item in list.iter() {
    |         ^----
    |         ||
    |         |hint: to prevent move, use
    |         `ref item` or `ref mut item`
    |         cannot move out of borrowed content
#+END_SRC

** largest для Copy-типов

#+BEGIN_SRC rust
fn largest<T: PartialOrd + Copy>(list: &[T]) -> T {
    let mut largest = list[0];

    for &item in list.iter() {
        if item > largest {
            largest = item;
        }
    }

    largest
}

#+END_SRC

* Проверка ссылок с помощью времён жизни

* Времена жизни предотвращают висячие ссылки

** Попытка использовать мёртвое значение

#+BEGIN_SRC rust
{
    let r;

    {
        let x = 5;
        r = &x;
    }

    println!("r: {}", r);
}
#+END_SRC

** Не компилируется

#+BEGIN_SRC text
  error: `x` does not live long enough
     |
  6  |         r = &x;
     |              - borrow occurs here
  7  |     }
     |     ^ `x` dropped here while still borrowed
  ...
  10 | }
     | - borrowed value needs to live until here

#+END_SRC

* Анализатор заимствований

** Пример с аннотациями

#+BEGIN_SRC rust
{
    let r;         // -------+-- 'a
                   //        |
    {              //        |
        let x = 5; // -+-----+-- 'b
        r = &x;    //  |     |
    }              // -+     |
                   //        |
    println!("r: {}", r); // |
                   //        |
                   // -------+
}
#+END_SRC

** Пример без висячих ссылок

#+BEGIN_SRC rust
{
    let x = 5;            // -----+-- 'b
                          //      |
    let r = &x;           // --+--+-- 'a
                          //   |  |
    println!("r: {}", r); //   |  |
                          // --+  |
}                         // -----+

#+END_SRC

* Обобщённые времена жизни в функциях

** longest

#+BEGIN_SRC rust
fn main() {
    let string1 = String::from("abcd");
    let string2 = "xyz";

    let result = longest(string1.as_str(), string2);
    println!("The longest string is {}", result);
}
#+END_SRC

** Реализация longest

#+BEGIN_SRC rust
fn longest(x: &str, y: &str) -> &str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}
#+END_SRC

** Ошибка

#+BEGIN_SRC rust
  error[E0106]: missing lifetime specifier
     |
  1  | fn longest(x: &str, y: &str) -> &str {
     |                                 ^
     |       expected lifetime parameter
     |
     = help: this function's return type contains
     a borrowed value, but the
     signature does not say whether it is borrowed
     from `x` or `y`
#+END_SRC

* Синтаксис аннотации времени жизни

** Пример

#+BEGIN_SRC rust
&i32        // ссылка
&'a i32     // ссылка с явным ВЖ
&'a mut i32 // изменяемая ссылка с явным ВЖ
#+END_SRC

* Аннотации ВЖ в определении функции

** longest

#+BEGIN_SRC rust
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}
#+END_SRC

** Как отличаются ВЖ (1)

#+BEGIN_SRC rust
  fn main() {
      let string1 = String::from(
          "длинная строка длинна");
      {
          let string2 = String::from("xyz");
          let result = longest(string1.as_str(),
                               string2.as_str());
          println!("Самая длинная строка - {}",
                   result);
      }
  }
#+END_SRC

** Как отличаются ВЖ (2)

#+BEGIN_SRC rust
  fn main() {
      let string1 = String::from(
          "длинная строка длинна");
      {
          let string2 = String::from("xyz");
          let result = longest(string1.as_str(),
                               string2.as_str());
      }
      println!("Самая длинная строка - {}",
               result);
  }
#+END_SRC

** Ошибка анализатора заимствования

#+BEGIN_SRC rust
  error: `string2` does not live long enough
     |
  6  |         result = longest(string1.as_str(),
     |                          string2.as_str());
     |                          - borrow occurs here
  7  |     }
     |     ^ `string2` dropped here
     |        while still borrowed
  8  |     println!("The longest string is {}",
     |              result);
  9  | }
     | - borrowed value needs to live until here
#+END_SRC

* Думаем о ВЖ

** longest с одним ВЖ

#+BEGIN_SRC rust
fn longest<'a>(x: &'a str, y: &str) -> &'a str {
    x
}
#+END_SRC

** longest с висячей ссылкой

#+BEGIN_SRC rust
fn longest<'a>(x: &str, y: &str) -> &'a str {
    let result = String::from("длинная строка");
    result.as_str()
}
#+END_SRC

** Ошибка

#+BEGIN_SRC text
  error: `result` does not live long enough
    |
  3 |     result.as_str()
    |     ^^^^^^ does not live long enough
  4 | }
    | - borrowed value only lives until here
    |
  note: borrowed value must be valid for the
  lifetime 'a as defined on the block at 1:44...
    |
  1 | fn longest<'a>(x: &str, y: &str) -> &'a str {
    |
#+END_SRC

* Аннотации ВЖ в определении структур

** Пример

#+BEGIN_SRC rust
  struct ImportantExcerpt<'a> {
      part: &'a str,
  }

  fn main() {
      let novel = String::from(
          "Call me Ishmael. Some years ago...");
      let first_sentence = novel.split('.')
          .next()
          .expect("Could not find a '.'");
      let i = ImportantExcerpt {
          part: first_sentence
      };
  }
#+END_SRC

* Опускание ВЖ

** Пример без явных ВЖ

#+BEGIN_SRC rust
fn first_word(s: &str) -> &str {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}
#+END_SRC

** Раскрывается в

#+BEGIN_SRC rust
fn first_word<'a>(s: &'a str) -> &'a str {
#+END_SRC

* Правила опускания ВЖ

** 1

- Каждый параметр--ссылка получает своё ВЖ
- ~fn foo<'a>(x: &'a i32)~
- ~fn foo<'a, 'b>(x: &'a i32, y: &'b i32)~

** 2

- Если входное ВЖ только одно, оно присваивается всем выходным ВЖ

** 3

- Если одно из входных ВЖ - ~&self~, оно присваивается всем выходным ВЖ

* Аннотации ВЖ в определении методов

** Пример

#+BEGIN_SRC rust
impl<'a> ImportantExcerpt<'a> {
    fn level(&self) -> i32 {
        3
    }
}
#+END_SRC

** Пример с опусканием

#+BEGIN_SRC rust
  impl<'a> ImportantExcerpt<'a> {
      fn announce_and_return_part(
          &self, announcement: &str) -> &str
      {
          println!("Attention please: {}",
                   announcement);
          self.part
      }
  }
#+END_SRC

* Статическое время жизни

** Пример

#+BEGIN_SRC rust
let s: &'static str = "У меня статическое ВЖ.";
#+END_SRC

* Обобщённые типы, ограничения типажей и ВЖ вместе

** Пример

#+BEGIN_SRC rust
  use std::fmt::Display;

  fn longest_with_an_announcement<'a, T>(
      x: &'a str, y: &'a str, ann: T) -> &'a str
      where T: Display
  {
      println!("Announcement! {}", ann);
      if x.len() > y.len() {
          x
      } else {
          y
      }
  }
#+END_SRC

* Домашнее задание

** Домашнее задание

- Определить структуру трёхмерного вектора, у которого каждый компонент может
  быть любого численного типа
- Определить на ней методы
  - установки определённого компонента
  - сравнения с другим по длине
- Определить такой метод сложения векторов, чтобы он возвращал структуру,
  ссылающуюся на операнды
- Определить на этой структуре метод распечатывания

* Спасибо

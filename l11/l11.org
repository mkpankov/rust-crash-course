#+TITLE: Rust №11. Тестирование
#+AUTHOR: Панков Михаил
#+DATE: Февраль 2017
#+EMAIL: work@michaelpankov.com
#+LANGUAGE: ru
#+CATEGORY: task
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
# +LaTeX_CLASS_OPTIONS: [notes]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+latex_header: \usepackage[english,russian]{babel}
#+latex_header: \mode<beamer>{\usetheme{metropolis}}

* Тесты

** Типы это хорошо, но тесты всё равно нужны

- ~add_two(a: isize) -> isize~

* Как писать тесты

* Строение тестовой функции

** Пример библиотеки

#+BEGIN_SRC text
$ cargo new adder
     Created library `adder` project
$ cd adder
#+END_SRC

** Сгенерированный код

#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
    }
}
#+END_SRC

** Этот тест проходит

#+BEGIN_SRC text
$ cargo test
   Compiling adder v0.1.0 (file:///projects/adder)
    Finished debug [unoptimized + debuginfo]
      target(s) in 0.22 secs
     Running target/debug/deps/adder-ce99bcc2479f4607
running 1 test
test tests::it_works ... ok
test result: ok. 1 passed; 0 failed; 0 ignored;
   Doc-tests adder
running 0 tests
test result: ok. 0 passed; 0 failed; 0 ignored;
#+END_SRC

** Добавим сломанный тест

#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
    }

    #[test]
    fn another() {
        panic!("Я хочу упасть");
    }
}
#+END_SRC

** Вывод сломанного теста

#+BEGIN_SRC text
running 2 tests
test tests::it_works ... ok
test tests::another ... FAILED
failures:
---- tests::another stdout ----
    thread 'tests::another' panicked at
    'Я хочу упасть', src/lib.rs:9
note: Run with `RUST_BACKTRACE=1` for a backtrace.
failures:
    tests::another
test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured
error: test failed
#+END_SRC

* Проверка результатов с помощью макроса assert!

** Пример

#+BEGIN_SRC rust
  #[derive(Debug)]
  pub struct Rectangle {
      length: u32,
      width: u32,
  }

  impl Rectangle {
      pub fn can_hold(&self, other: &Rectangle)
                      -> bool
      {
          self.length > other.length
            && self.width > other.width
      }
  }
#+END_SRC

** Тест для этого примера

#+BEGIN_SRC rust
  #[cfg(test)]
  mod tests {
      use super::*;
      #[test]
      fn larger_can_hold_smaller() {
          let larger = Rectangle {
              length: 8, width: 7
          };
          let smaller = Rectangle {
              length: 5, width: 1
          };
          assert!(larger.can_hold(&smaller));
      }
  }
#+END_SRC

** Результат

#+BEGIN_SRC text
running 1 test
test tests::larger_can_hold_smaller ... ok

test result: ok. 1 passed; 0 failed; 0 ignored;
#+END_SRC

** Другой тест

#+BEGIN_SRC rust
  #[cfg(test)]
  mod tests {
      use super::*;
      #[test]
      fn smaller_cant_hold_larger() {
          let larger = Rectangle { length: 8, width: 7 };
          let smaller = Rectangle { length: 5, width: 1 };
          assert!(!smaller.can_hold(&larger));
      }
  }
#+END_SRC

** Результат

#+BEGIN_SRC text
running 2 tests
test tests::smaller_can_hold_larger ... ok
test tests::larger_can_hold_smaller ... ok

test result: ok. 2 passed; 0 failed; 0 ignored;
#+END_SRC

** Добавим баг

#+BEGIN_SRC rust
  #[derive(Debug)]
  pub struct Rectangle {
      length: u32,
      width: u32,
  }
  impl Rectangle {
      pub fn can_hold(&self, other: &Rectangle)
                      -> bool
      {
          self.length < other.length
              && self.width > other.width
      }
  }
#+END_SRC

** Результат

#+BEGIN_SRC rust
  running 2 tests
  test tests::smaller_can_hold_larger ... ok
  test tests::larger_can_hold_smaller ... FAILED
  failures:
  ---- tests::larger_can_hold_smaller stdout ----
      thread 'tests::larger_can_hold_smaller' panicked at
      'assertion failed:
      larger.can_hold(&smaller)', src/lib.rs:22
  note: Run with `RUST_BACKTRACE=1` for a backtrace.
  failures:
      tests::larger_can_hold_smaller
  test result: FAILED. 1 passed; 1 failed; 0 ignored;
#+END_SRC

** Проверка равенства с помощью =assert_eq!= и =assert_ne!=

#+BEGIN_SRC rust
pub fn add_two(a: i32) -> i32 {
    a + 3
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_adds_two() {
        assert_eq!(4, add_two(2));
    }
}
#+END_SRC

** Результат

#+BEGIN_SRC text
  running 1 test
  test tests::it_adds_two ... FAILED
  failures:
  ---- tests::it_adds_two stdout ----
      thread 'tests::it_adds_two' panicked at
      'assertion failed: `(left == right)`
      (left: `4`, right: `5`)', src/lib.rs:11
  note: Run with `RUST_BACKTRACE=1` for a backtrace.
  failures:
      tests::it_adds_two
  test result: FAILED. 0 passed; 1 failed; 0 ignored;
#+END_SRC

** Ограничения

- Реализован Debug и PartialEq

* Пользовательские сообщения об ошибках

** Пример

#+BEGIN_SRC rust
  pub fn greeting(name: &str) -> String {
      String::from("Hello!")
  }
  #[cfg(test)]
  mod tests {
      use super::*;
      #[test]
      fn greeting_contains_name() {
          let result = greeting("Carol");
          assert!(
              result.contains("Carol"),
              "No name, value was `{}`",
              result
          );
      }
  }
#+END_SRC

** Результат

#+BEGIN_SRC text
---- tests::greeting_contains_name stdout ----
    thread 'tests::greeting_contains_name' panicked
    at 'No name, value was `Hello`', src/lib.rs:12
note: Run with `RUST_BACKTRACE=1` for a backtrace.
#+END_SRC

* Проверка паники с помощью =should_panic=

** Пример

#+BEGIN_SRC rust
  struct Guess {
      value: u32,
  }
  impl Guess {
      pub fn new(value: u32) -> Guess {
          if value < 1 || value > 100 {
              panic!(
                  "1 <= value <= 100, got {}.",
                  value);
          }
          Guess {
              value: value,
          }
      }
  }
#+END_SRC

** Тест

#+BEGIN_SRC rust
  #[cfg(test)]
  mod tests {
      use super::*;
      #[test]
      #[should_panic]
      fn greater_than_100() {
          Guess::new(200);
      }
  }
#+END_SRC

** Проверка сообщения паники

#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    #[should_panic(expected = "1 <= value <= 100")]
    fn greater_than_100() {
        Guess::new(200);
    }
}
#+END_SRC

* Управление запуском тестов

* Запуск тестов параллельно или последовательно

** Последовательный запуск

#+BEGIN_SRC text
$ cargo test -- --test-threads=1
#+END_SRC

* Вывод на экран из тестовой функции

** Функция

#+BEGIN_SRC rust
fn prints_and_returns_10(a: i32) -> i32 {
    println!("Получили значение {}", a);
    10
}
#+END_SRC

** Тесты

#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn this_test_will_pass() {
        let value = prints_and_returns_10(4);
        assert_eq!(10, value);
    }
    #[test]
    fn this_test_will_fail() {
        let value = prints_and_returns_10(8);
        assert_eq!(5, value);
    }
}
#+END_SRC

** Вывод

#+BEGIN_SRC text
  running 2 tests
  test tests::this_test_will_pass ... ok
  test tests::this_test_will_fail ... FAILED
  failures:
  ---- tests::this_test_will_fail stdout ----
      Получили значение 8
  thread 'tests::this_test_will_fail' panicked
  at 'assertion failed: `(left == right)`
  (left: `5`, right: `10`)', src/lib.rs:19
  note: Run with `RUST_BACKTRACE=1` for a backtrace.
  failures:
      tests::this_test_will_fail
  test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured
#+END_SRC

** Вывод на экран

#+BEGIN_SRC text
$ cargo test -- --nocapture
#+END_SRC

** Вывод

#+BEGIN_SRC text
  running 2 tests
  Получили значение 4
  Получили значение 8
  test tests::this_test_will_pass ... ok
  thread 'tests::this_test_will_fail' panicked at
  'assertion failed: `(left == right)`
  (left: `5`, right: `10`)', src/lib.rs:19
  note: Run with `RUST_BACKTRACE=1` for a backtrace.
  test tests::this_test_will_fail ... FAILED
  failures:
  failures:
      tests::this_test_will_fail
  test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured
#+END_SRC

* Запуск подмножества тестов по имени

** Тесты

#+BEGIN_SRC rust
pub fn add_two(a: i32) -> i32 {
    a + 2
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn add_two_and_two() {
        assert_eq!(4, add_two(2));
    }
    ...
}
#+END_SRC

** Вывод

#+BEGIN_SRC text
running 3 tests
test tests::add_two_and_two ... ok
test tests::add_three_and_two ... ok
test tests::one_hundred ... ok

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC

** Запуск одного теста

#+BEGIN_SRC text
$ cargo test one_hundred
    Finished debug [unoptimized + debuginfo]
     Running target/debug/deps/adder-06a75b4a1f2515e9

running 1 test
test tests::one_hundred ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC

** Запуск множества тестов

#+BEGIN_SRC text
$ cargo test add
    Finished debug [unoptimized + debuginfo]
     Running target/debug/deps/adder-06a75b4a1f2515e9

running 2 tests
test tests::add_two_and_two ... ok
test tests::add_three_and_two ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC

* Игнорирование тестов

** Пример

#+BEGIN_SRC rust
#[test]
fn it_works() {
    assert!(true);
}

#[test]
#[ignore]
fn expensive_test() {
    // исполняется час
}
#+END_SRC

** Вывод

#+BEGIN_SRC rust
$ cargo test
   Compiling adder v0.1.0 (file:///projects/adder)
    Finished debug [unoptimized + debuginfo]
     Running target/debug/deps/adder-ce99bcc2479f4607
running 2 tests
test expensive_test ... ignored
test it_works ... ok
test result: ok. 1 passed; 0 failed; 1 ignored; 0 measured
   Doc-tests adder
running 0 tests
test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC

** Запуск игнорированных тестов

#+BEGIN_SRC text
$ cargo test -- --ignored
    Finished debug [unoptimized + debuginfo]
     Running target/debug/deps/adder-ce99bcc2479f4607

running 1 test
test expensive_test ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC

* Организация тестов

* Модульные и интеграционные тесты

* Модульные тесты

* Модуль tests и =#[cfg(test)]=

** Пример

#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
    }
}
#+END_SRC

* Тестирование скрытых функций

** Пример

#+BEGIN_SRC rust
pub fn add_two(a: i32) -> i32 {
    internal_adder(a, 2)
}
fn internal_adder(a: i32, b: i32) -> i32 {
    a + b
}
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn internal() {
        assert_eq!(4, internal_adder(2, 2));
    }
}
#+END_SRC

* Интеграционные тесты

* Директория =tests=

** Пример

=tests/integration_test.rs=:

#+BEGIN_SRC rust
extern crate adder;

#[test]
fn it_adds_two() {
    assert_eq!(4, adder::add_two(2));
}
#+END_SRC

** Вывод

#+BEGIN_SRC text
cargo test
   Compiling adder v0.1.0 (file:///projects/adder)
    Finished debug [unoptimized + debuginfo] target(s) in 0.31 secs
     Running target/debug/deps/adder-abcabcabc
running 1 test
test tests::internal ... ok
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
     Running target/debug/deps/integration_test-ce99bcc2479f4607
running 1 test
test it_adds_two ... ok
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC

** Запуск отдельного интеграционного теста

#+BEGIN_SRC text
$ cargo test --test integration_test
    Finished debug [unoptimized + debuginfo]
     Running target/debug/integration_test-952a27e0126bb565

running 1 test
test it_adds_two ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC

* Подмодули в интеграционных тестах

** Пример

=tests/common.rs=:

#+BEGIN_SRC rust
pub fn setup() {
    // общий код настройки
}
#+END_SRC

** Вывод

#+BEGIN_SRC text
running 1 test
test tests::internal ... ok
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
     Running target/debug/deps/common-b8b07b6f1be2db70
running 0 tests
test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
     Running target/debug/deps/integration_test-d993c68b431d39df
running 1 test
test it_adds_two ... ok
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
#+END_SRC

** Выносим модуль в под-директорию

=tests/common/mod.rs=:

#+BEGIN_SRC rust
pub fn setup() {
    // общий код настройки
}
#+END_SRC

=tests/integration_test.rs=:

#+BEGIN_SRC rust
extern crate adder;
mod common;
#[test]
fn it_adds_two() {
    common::setup();
    assert_eq!(4, adder::add_two(2));
}
#+END_SRC

* Интеграционные тесты для приложений

** Тестируйте библиотеку

- Весь код в библиотеке, =src/lib.rs=
- =src/main.rs= обращается к библиотеке

* Домашнее задание

** Домашнее задание

- Написать модульные и интеграционные тесты для структуры трёхмерного
  вектора из предыдущих уроков

* Спасибо
